o primeiro passo e instalar 3 pacotes para criar um servidor http
nunca esquecer de digitar --save apos a instalação de qualquer modulo
isso serve pra salvar o nome dele no package-lock
 
1 - http 
2 - express
3 - debug

-----------------------------------------
nunca fixe a porta onde o aplicativo vai rodar porque se no servidor onde ela esta 
hospedada essa porta estiver em uso vai dar problema.por isso é interessando usar uma função 
para normalização de porta.
---------------------------------------------------------
separar o arquivo de 'app' do servidor é uma boa pratica 

tudo que foor referente aoo app em si  como 
-rota 
-resposta 
-framework 
são partes que comepoem oo aplicativoo em si e oque dá a reposta da requisição 
o arquivo 'server' que contem as configurações do servidor que vai servir o app para o cliente 
fica com 
- funçoes de noormalização de porta 
- funçoes de tratamento de erro 
- função de requisição do arquivo que esta o app
- funçoes que colocam o servidor online de fato  

a separação fisica dessas funções em arquivos diferentes e essecial para uma boa organização do codigo.
-----------------------------------------------------------------

macete 
o comando 

--save-dev-

so deve ser usado para dependencias que não vão pra produção que são usadas somente dentro do ambiente de desenvolvimmento 
para testes comop por exemplo o nodemon que fica escutando as alaterações feitas nos arquivos e reinicia o servidor de forma automatica 
o jeito certo de instalar o nodemon

npm install -g nodemon

o jeito certo de usar 

nodemon ./server.js

-------------------------------------------------------------------
CRUD via api 

Não é um boa pratica colocar os metodos dessas forma '/create', '/post'
a definição do metodo que vai ser executando é assim: 
é ujk metodo que sai da classe post

const create = router.post('/',(req,res,next)=>{

    res.status(200).send();
});

requisições do tipo post são para enviar dados para a api
quando uma requisição dessas é feita temos que configurar o tipo de dado que vai ser 
enviado, normalmente se envia um JSON para um a api e ele tem que receber e converter esse json pra pegar os dados 
usando o Body parser.


O bodyParser funciona como midware que pega as resuisições de put que vem e transforma em json o corpo da reiquisição.

operações como put e delete precisam do id pra saber oque elas vão deletar ou alterar

-------------------------------------------------------------------------------------
Estrutura da api 
 -quem fica com os metodos get, put, post, delete e a propria entidade, essa é uma api de produtos
  então o proprio arquivo product route fica com esses metodos quem aciona eles eo app quando necessario 
  o cliente pede pra ver a lista de produtos. 
  - o app chama o arquivo product-route, busca pelo metodo get e aciona a função

CODIGO REFATORADO
---------------------------------------------------------------------------------------------
Eu adicionei um controller agora toda a responsabilidade de req res esta no controller a unica coisa que o app vai fazer é 
adimnistrar as rotas as funções principais vaõa ficar no controller mesmo assim o codigo fica mais limpo.

USANDO MONGO DB 
--------------------------------------------------------------------------------------------
O mongo db é uma coleção de objetos, ele guarda registros como um banco relacional
no caso um objeto pode ter um dado ou pode não ter isso não vai causar um conflito 
no momento do armazenamento dele na colection.

A responsabilidade de enviar os dados corretos fica sendo da aplicação.
-------------------------------------------------------------------------------------------------------
instalando mongoose

 npm install mongoose --save
 ---------------------------------------------------------------------
 Schema no Mongo db 
   O mongo db embora seja um banco não relacional ele pode usar schemas para padronizar
   os dados que vão ser entregues pela requisição.
------------------------------------------------------------------------
























